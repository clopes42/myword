// Whether to output fallback values in px when using rem as the rhythm-unit.
$rem-with-px-fallback: true !default;

// Output a given style rule containing rem values along with an (optional)
// fallback rule for older browsers (with rem values converted to px).
//
// @param $property
//   The css property name.
//
// @param $values
//   The value (or space-separated list of values) for the property.
//
// @param $use-px-fallback
//   [ true | false ]
//
@mixin rem($property, $values, $use-px-fallback: $rem-with-px-fallback) {
    // Create a couple of empty lists as output buffers.
    $px-values: ();
    $rem-values: ();

    // Loop through the $values list
    @each $value in $values {
        // For each property value, if it's in rem or px, derive both rem and
        // px values for it and add those to the end of the appropriate buffer.
        // Ensure all pixel values are rounded to the nearest pixel.
        @if type-of($value) == number and not unitless($value) and (unit($value) == px or unit($value) == rem) {
            @if unit($value) == px {
                $px-values: join($px-values, round($value));
                $rem-values: join($rem-values, convert-length($value, rem));
            }
            @else {
                $px-values: join($px-values, round(convert-length($value, px)));
                $rem-values: join($rem-values, $value);
            }
        }
        @else {
            $px-values: join($px-values, $value);
            $rem-values: join($rem-values, $value);
        }
    }

    // Use pixel fallback for browsers that don't understand rem units.
    @if $use-px-fallback and $px-values != $rem-values {
        #{$property}: $px-values;
    }

    // Use rem values for everyone else (overrides pixel values).
    #{$property}: $rem-values;
}